// src/data/importExcel.js
const xlsx = require('xlsx');
const moment = require('moment-timezone');
const { encrypt } = require('../utils/crypto');
const mongoose = require('../db/mongoose');
const ProxyAccount = require('../db/ProxyAccount');
const path = require('path');

/**
 * Tr·∫£ v·ªÅ th·ªùi gian hi·ªán t·∫°i ·ªü m√∫i gi·ªù VN (Asia/Ho_Chi_Minh)
 */
function nowVN() {
  return moment().tz('Asia/Ho_Chi_Minh').format('YYYY-MM-DD HH:mm:ss');
}

async function importFromExcel(filePath) {
  // 1. ƒê·ªçc workbook
  const wb = xlsx.readFile(filePath);
  const ws = wb.Sheets[wb.SheetNames[0]];
  const rows = xlsx.utils.sheet_to_json(ws, { header: 1 });

  // 2. Duy·ªát t·ª´ng d√≤ng (t√≠nh c·∫£ header n·∫øu c√≥, b·∫Øt ƒë·∫ßu t·ª´ i=0)
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const [proxyRaw, emailRaw, pwdRaw] = row;

    console.log(`üëâ D√≤ng ${i + 1} raw:`, row);

    // N·∫øu email ho·∫∑c m·∫≠t kh·∫©u tr·ªëng, b·ªè qua
    if (!emailRaw || !pwdRaw) {
      console.warn(
        `‚ö†Ô∏è D√≤ng ${i + 1} b·ªã b·ªè qua: thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u`,
        row
      );
      continue;
    }

    const email = String(emailRaw).trim();
    const pwd = String(pwdRaw).trim();

    if (!email || !pwd) {
      console.warn(
        `‚ö†Ô∏è D√≤ng ${i + 1} b·ªã b·ªè qua: email/m·∫≠t kh·∫©u tr·ªëng sau trim`,
        row
      );
      continue;
    }

    // T√≠nh timestamps
    const createdAtVN = nowVN();
    const updatedAtVN = createdAtVN;

    // 3. X√°c ƒë·ªãnh xem c√≥ proxy hay kh√¥ng: n·∫øu proxyRaw === 'none' (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng) ho·∫∑c tr·ªëng
    const raw = String(proxyRaw || '').trim();
    const hasProxyData = raw && raw.toLowerCase() !== 'none';

    let proxyObj = null;
    if (hasProxyData) {
      const parts = raw.split(':');
      if (parts.length < 4) {
        console.warn(
          `‚ö†Ô∏è D√≤ng ${i + 1} proxy kh√¥ng h·ª£p l·ªá (c·∫ßn √≠t nh·∫•t 4 ph·∫ßn):`,
          raw
        );
      } else {
        const [host, portStr, user, pass, protocol = 'HTTP'] = parts;
        const port = parseInt(portStr, 10);

        if (!host || isNaN(port)) {
          console.warn(
            `‚ö†Ô∏è D√≤ng ${i + 1} proxy kh√¥ng h·ª£p l·ªá (host ho·∫∑c port):`,
            raw
          );
        } else {
          proxyObj = {
            host,
            port,
            username: encrypt(String(user || '').trim()),
            password: encrypt(String(pass || '').trim()),
            protocol: String(protocol || 'HTTP').toUpperCase(),
          };
        }
      }
    }

    try {
      // 4. Chu·∫©n b·ªã c√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t v√†o DB
      const updateFields = {
        email,
        emailPassword: encrypt(pwd),
        active: true,
        streak: true,
        updatedAtVN,
        complete: false,
        // N·∫øu kh√¥ng c√≥ proxyObj, v·∫´n cho ch·∫°y nh∆∞ng ƒë√°nh d·∫•u proxyAlive=false
        proxyAlive: proxyObj ? true : false,
        // createdAtVN s·∫Ω ch·ªâ ƒë∆∞·ª£c set khi insert m·ªõi
      };

      if (proxyObj) {
        updateFields.proxy = proxyObj;
      }

      // 5. Th·ª±c hi·ªán upsert (insert n·∫øu ch∆∞a c√≥, update n·∫øu ƒë√£ t·ªìn t·∫°i)
      await ProxyAccount.findOneAndUpdate(
        { email }, // ƒëi·ªÅu ki·ªán t√¨m theo email
        {
          $set: updateFields,
          $setOnInsert: { createdAtVN },
        },
        { upsert: true, new: true, setDefaultsOnInsert: true }
      );

      console.log(`‚úîÔ∏è ƒê√£ l∆∞u/c·∫≠p nh·∫≠t account d√≤ng ${i + 1} (${email})`);
    } catch (e) {
      console.error(`‚ùå L·ªói l∆∞u account d√≤ng ${i + 1}:`, e.message);
    }
  }

  console.log('üöÄ Import xong t·∫•t c·∫£ d√≤ng.');
  mongoose.disconnect();
}

// N·∫øu ch·∫°y tr·ª±c ti·∫øp file n√†y b·∫±ng `node importExcel.js <file>`, g·ªçi h√†m
if (require.main === module) {
  const file =
    process.argv[2] || path.join(__dirname, '../../data/proxies.xlsx');
  importFromExcel(file);
}

module.exports = importFromExcel;
