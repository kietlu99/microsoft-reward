// src/scripts/checkProxies.js
require('dotenv').config();
const xlsx = require('xlsx');
const mongoose = require('../db/mongoose');
const ProxyAccount = require('../db/ProxyAccount');
const { encrypt, decrypt } = require('../utils/crypto');
const path = require('path');
const axios = require('axios');
const { HttpsProxyAgent, HttpProxyAgent } = require('https-proxy-agent');

const EXCEL_INPUT = path.join(__dirname, '../../data/proxies.xlsx');
const EXCEL_OUTPUT = path.join(__dirname, '../../data/dead_proxies.xlsx');

/**
 * ƒê·ªçc file Excel, tr·∫£ v·ªÅ m·∫£ng m·ªói d√≤ng d∆∞·ªõi d·∫°ng [proxyRaw, email, pwd]
 */
function readExcel(filePath) {
  const wb = xlsx.readFile(filePath);
  const ws = wb.Sheets[wb.SheetNames[0]];
  return xlsx.utils.sheet_to_json(ws, { header: 1 });
}

/**
 * Ghi m·∫£ng rows (m·ªói row l√† m·∫£ng gi√° tr·ªã) ra file Excel m·ªõi
 */
function writeExcel(rows, filePath) {
  const wb = xlsx.utils.book_new();
  const ws = xlsx.utils.aoa_to_sheet(rows);
  xlsx.utils.book_append_sheet(wb, ws, 'dead_proxies');
  xlsx.writeFile(wb, filePath);
}

/**
 * Ki·ªÉm tra proxy c√≥ th·ªÉ request https://www.bing.com th√†nh c√¥ng hay kh√¥ng.
 * Tr·∫£ v·ªÅ true n·∫øu kh√¥ng timeout, false n·∫øu l·ªói (timeout, unreachable‚Ä¶).
 */
async function testProxy({ host, port, user, pass, protocol }) {
  try {
    // T·∫°o proxy URL: v√≠ d·ª• "http://user:pass@host:port"
    const credentials = user && pass ? `${user}:${pass}@` : '';
    const proxyUrl = `${protocol.toLowerCase()}://${credentials}${host}:${port}`;

    // Kh·ªüi t·∫°o agent t∆∞∆°ng ·ª©ng
    const agent =
      protocol.toLowerCase() === 'https'
        ? new HttpsProxyAgent(proxyUrl)
        : new HttpProxyAgent(proxyUrl);

    // G·ª≠i request t·ªõi Bing
    const response = await axios.get('https://www.bing.com', {
      timeout: 5000,
      httpAgent: agent,
      httpsAgent: agent,
      validateStatus: () => true, // B·ªè qua status code
    });

    return !!response;
  } catch {
    return false;
  }
}

(async () => {
  // 1. K·∫øt n·ªëi MongoDB
  await mongoose.connect(process.env.MONGO_URI);
  console.log('[DB] Connected to', process.env.MONGO_URI);

  // 2. ƒê·ªçc Excel ƒë·∫ßu v√†o
  const rows = readExcel(EXCEL_INPUT);
  // N·∫øu c√≥ header, b·ªè d√≤ng ƒë·∫ßu n·∫øu c·∫ßn: rows.shift();

  const deadList = [];

  for (let i = 0; i < rows.length; i++) {
    const [proxyRaw, emailEncrypted, pwdEncrypted] = rows[i];
    if (!proxyRaw) continue;

    // 3. Parse proxyRaw th√†nh host, port, user, pass, protocol
    const parts = proxyRaw.split(':');
    if (parts.length < 4) {
      console.warn(`‚ö†Ô∏è D√≤ng ${i + 1} proxy kh√¥ng h·ª£p l·ªá: ${proxyRaw}`);
      continue;
    }
    const [host, port, userEnc, passEnc, protocol = 'HTTP'] = parts;

    // 4. Gi·∫£i m√£ user/pass n·∫øu c·∫ßn
    let user = userEnc,
      pass = passEnc;
    try {
      user = decrypt(userEnc);
      pass = decrypt(passEnc);
    } catch {
      // gi·ªØ nguy√™n n·∫øu kh√¥ng m√£ ho√°
    }

    console.log(`üîé Ki·ªÉm tra proxy ${host}:${port} (d√≤ng ${i + 1})`);
    const alive = await testProxy({ host, port, user, pass, protocol });
    console.log(`  ‚Üí ${alive ? '‚úÖ C√≤n s·ªëng' : '‚ùå ƒê√£ ch·∫øt'}`);

    // 5. Gi·∫£i m√£ email ƒë·ªÉ d√πng l√†m query trong DB
    let email = emailEncrypted;
    try {
      email = decrypt(emailEncrypted);
    } catch {
      // gi·ªØ nguy√™n n·∫øu kh√¥ng m√£ ho√°
    }

    // 6. C·∫≠p nh·∫≠t proxyAlive trong MongoDB
    await ProxyAccount.findOneAndUpdate(
      { email: email.trim() },
      { proxyAlive: alive },
      { new: true }
    );

    // 7. N·∫øu proxy ch·∫øt, push v√†o deadList ƒë·ªÉ xu·∫•t file
    if (!alive) {
      deadList.push([proxyRaw, email, pwdEncrypted]);
    }
  }

  // 8. Xu·∫•t file Excel ch·ªâ ch·ª©a proxy ch·∫øt
  if (deadList.length) {
    const header = [['Proxy', 'Email', 'Password']];
    writeExcel(header.concat(deadList), EXCEL_OUTPUT);
    console.log(
      `üìÅ ƒê√£ xu·∫•t ${deadList.length} proxy ch·∫øt v√†o: ${EXCEL_OUTPUT}`
    );
  } else {
    console.log('üéâ Kh√¥ng c√≥ proxy n√†o ch·∫øt, kh√¥ng t·∫°o file Excel.');
  }

  await mongoose.disconnect();
  console.log('[DB] Disconnected');
})();
