// src/rewards/processOffers.js
const { delay, log } = require('../utils');
const { TimeoutError } = require('puppeteer');
const {
  THREE_OFFERS_SELECTOR,
  EXCLUSIVE_CONTAINER_SELECTOR,
} = require('../config');
const { timeout } = require('puppeteer');

/**
 * X·ª≠ l√Ω l·∫ßn l∆∞·ª£t c√°c offer tr√™n Bing Rewards panel.
 * @param {import('puppeteer').Page} page
 */
module.exports = async function processOffers(page) {
  const browser = page.browser();
  log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω offers');

  // PH·∫¶N 1: Three Offers (nth-child 2,3,4)
  const firstOffers = [2, 3, 4];
  for (const n of firstOffers) {
    const sel = `${THREE_OFFERS_SELECTOR} > div:nth-child(${n}) > a`;
    try {
      await page.waitForSelector(sel, { timeout: 5000 });
      const href = await page.$eval(sel, (a) => a.href);
      log(`‚ñ∂Ô∏è ThreeOffer #${n - 1}: ${href}`);

      await Promise.all([
        page.waitForNavigation({ waitUntil: 'networkidle2' }),
        page.click(sel),
      ]);
      log(`‚úÖ V√†o ThreeOffer #${n - 1}`);

      await delay(3000);
      await page.goBack({ waitUntil: 'networkidle2' });
      log('üîô Quay l·∫°i Rewards panel');

      await page.waitForSelector(THREE_OFFERS_SELECTOR, { timeout: 5000 });
    } catch (err) {
      log(`‚ö†Ô∏è B·ªè qua ThreeOffer #${n - 1}: ${err.message}`);
    }
  }

  // PH·∫¶N 2: Exclusive promo
  // 1) L·∫•y danh s√°ch href t·ª´ c√°c <a> con trong exclusive containers
  const hrefs = await page.$$eval(
    `${EXCLUSIVE_CONTAINER_SELECTOR} a`,
    (anchors) => anchors.map((a) => a.href)
  );
  log(`‚ñ∂Ô∏è T√¨m th·∫•y ${hrefs.length} exclusive links`);

  // 2) Duy·ªát t·ª´ng href
  try {
    for (const href of hrefs) {
      // 2.a) T√¨m l·∫°i anchor b·∫±ng href, ch·ªù selector hi·ªán
      const linkSelector = `${EXCLUSIVE_CONTAINER_SELECTOR} a[href="${href}"]`;
      await page.waitForSelector(linkSelector, { timeout: 5000 });

      // 2.b) Click + ƒë·ª£i navigation

      await Promise.all([
        // gi·∫£m timeout xu·ªëng v√≠ d·ª• 5000ms thay v√¨ 30000
        page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 5000 }),
        page.click(linkSelector),
      ]);
      log(`‚úÖ ƒê√£ click v√† v√†o: ${href}`);

      // 2.c) Gi·∫£ l·∫≠p thao t√°c ng∆∞·ªùi d√πng
      await delay(2000);

      // 2.d) Quay l·∫°i Rewards panel

      await page.goBack({ waitUntil: 'networkidle2', timeout: 5000 });
      log('üîô Quay l·∫°i Rewards panel');

      // 2.e) Ch·ªù panel render l·∫°i
      await page.waitForSelector(EXCLUSIVE_CONTAINER_SELECTOR, {
        timeout: 10000,
      });
      await delay(2000);
    }
  } catch (err) {
    log(`‚ö†Ô∏è B·ªè qua Exclusive promo: ${err.message}`);
  }

  // PH·∫¶N 3: Secondary Offers ‚Äì t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh start index
  const possibleContainers = [
    '#bingRewards > div > div:nth-child(8)',
    '#bingRewards > div > div:nth-child(7)',
    '#bingRewards > div > div:nth-child(6)',
    '#bingRewards > div > div.flyout_control_halfUnit',
  ];

  let containerSelector;
  for (const sel of possibleContainers) {
    if (await page.$(sel)) {
      containerSelector = sel;
      log(`‚ñ∂Ô∏è D√πng SECONDARY_OFFERS_CONTAINER = ${sel}`);
      break;
    }
  }

  if (!containerSelector) {
    log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ secondary offers container n√†o.');
  } else {
    // Ki·ªÉm tra c√≥ exclusive promo (n·∫±m ·ªü div:nth-child(1) trong container n√†y) kh√¥ng
    const hasExclusive = Boolean(
      await page.$(`${EXCLUSIVE_CONTAINER_SELECTOR}`)
    );
    const startIdx = hasExclusive ? 3 : 1;
    log(`‚ñ∂Ô∏è hasExclusive=${hasExclusive}, startIdx=${startIdx}`);

    // ƒê·∫øm t·ªïng s·ªë div con
    const total = await page.$$eval(
      `${containerSelector} > div`,
      (divs) => divs.length
    );
    log(`‚ñ∂Ô∏è C√≥ t·ªïng c·ªông ${total} div trong container`);

    // Loop t·ª´ startIdx t·ªõi total
    for (let idx = startIdx; idx <= total; idx++) {
      const offerDiv = `${containerSelector} > div:nth-child(${startIdx})`;
      try {
        await page.waitForSelector(offerDiv, { timeout: 5000 });
        const aria = await page.$eval(
          offerDiv,
          (el) => el.getAttribute('aria-label')?.trim() || ''
        );
        log(`‚Ä¢ Offer child #${idx}: aria-label="${aria}"`);

        if (aria === 'Offer not Completed') {
          const linkSel = `${offerDiv} > a`;
          await page.waitForSelector(linkSel, { timeout: 5000 });

          const { href, target } = await page.$eval(linkSel, (a) => ({
            href: a.href,
            target: a.target,
          }));
          log(`‚ñ∂Ô∏è OfferNotCompleted child #${idx}: ${href} (target=${target})`);

          if (target === '_blank') {
            // 1) Click v√†o link, tab m·ªõi s·∫Ω t·ª± ƒë·ªông m·ªü
            await page.click(linkSel);

            // 2) L·∫•y danh s√°ch t·∫•t c·∫£ trang, tab m·ªõi th∆∞·ªùng l√† tab cu·ªëi c√πng
            const pages = await browser.pages();
            const newTab = pages[pages.length - 1];

            await delay(5000);

            // 3) ƒê√≥ng tab m·ªõi ngay l·∫≠p t·ª©c
            await newTab.close();

            // 4) ƒê·∫£m b·∫£o focus quay l·∫°i tab ch√≠nh
            await page.bringToFront();

            log(`üîí ƒê√£ ƒë√≥ng tab m·ªõi sau khi click: ${href}`);
          } else {
            await Promise.all([
              page.waitForNavigation({ waitUntil: 'networkidle2' }),
              page.click(linkSel),
            ]);
            log(`‚úÖ V√†o offer same-tab: ${href}`);
            await delay(5000);
            await page.goBack({ waitUntil: 'networkidle2' });
          }

          // ƒê·ª£i panel render l·∫°i
          await page.waitForSelector(containerSelector, { timeout: 10000 });
          await delay(5000);
        } else {
          log(`‚è≠Ô∏è Offer child #${idx} ƒë√£ ho√†n th√†nh, b·ªè qua.`);
        }
      } catch (err) {
        log(`‚ö†Ô∏è B·ªè qua child #${idx}: ${err.message}`);
      }
    }

    log('üèÅ Ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ secondary offers');
  }

  log('üèÅ Ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ offers');
};
